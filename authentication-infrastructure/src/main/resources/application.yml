spring:
  kafka:
    consumer:
      group-id: authority-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      auto-offset-reset: latest
      bootstrap-servers: ${KAFKA_URLS}
      properties:
        spring.json.add.type.header: false
        spring.deserializer.value.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      bootstrap-servers: ${KAFKA_URLS}
    bootstrap-servers: ${KAFKA_URLS}
  r2dbc:
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    url: r2dbc:${DBMS}://${DB_HOST}:${DB_PORT}/${DB_NAME}?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Seoul

  jackson:
    property-naming-strategy: SNAKE_CASE
    date-format: yyyy-MM-dd'T'HH:mm:ss
    time-zone: Asia/Seoul
  redis:
    host: ${REDIS_HOST}
    password: ${REDIS_PASSWORD}
    port: ${REDIS_PORT}
    username: ${REDIS_USERNAME}
  application:
    name: user-service-v1
  sleuth:
    sampler:
      probability: 1
  zipkin:
    base-url: ${ZIPKIN_URL}
    sender:
      type: rabbit
  rabbitmq:
    host: ${RABBIT_MQ_HOST}
    port: ${RABBIT_MQ_PORT}
    username: ${RABBIT_MQ_USERNAME}
    password: ${RABBIT_MQ_PASSWORD}

server:
  port: ${SERVER_PORT}
  shutdown: graceful

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ${AWS_REGION}
    # when we run spring cloud on EC2, it starts CloudFormation setting. If we don't, our application doesn't start
    # So I turn of this setting
    stack:
      auto: false

---

spring:
  config:
    activate:
      on-profile: local